* Slides
https://github.com/strangeloop/StrangeLoop2017/tree/master/slides

* Biological path Towards Strong AI

numenta.org
@rhylight

** Movement
- Understand the world by moving, interacting with the environment
** Layers And Columns
- columns within layers
** Sparse Distributed Representation
- sparsity and distribution of neurons are important
- only 2% are on at any point
- Similarity score
- overlap with input-space
- spatial pooling
- cells become active and predictive

* Running Programs in Reverse

** Psychology
- varying displacement and rotation
- mental simulation as unifying theory in cognition

** Robotics
- inverse simulation to figure out what needs to be done to get the output you want

** Julia
- multi method dispatch
- can look at the generated code from the language

* Lazy Defenses: Using Scaled TTLs to Keep your Cache Correct

Slides:
https://docs.google.com/presentation/d/1NmYpyJzityaKmWORsMcUFs2HQKi0fS1NTwccEgs87WM/edit

* Aesthetic Engine 2

- Generative brutalist art projects

* "It Me": Under the Hood of Web Authentication
Slides: https://docs.google.com/presentation/d/e/2PACX-1vRQpAoiitWbkHg5hgtp2b7y5kgEEP7e1Z5aOcOB7c8QzEepCpDrotc-DN-WgzWKMpfCRXPQFaT6pHuL/pub?start=false&loop=false&delayms=60000&slide=id.g2776a6c5c7_2_284
** Passwords
- Adobe passwords hacked were encrypted, not hashed + salted
- 2M users were using the same password, we know passwords because hints were not encrypted

** Sessions
- By framework & send an ID
- Persistent on client
  - cookies
  - {local,session}Storage
    - vulnerable to XSS but Content-Security-Policy can help
- Sessions are signed(not encrypted)

** Is the timing difference measureable over the network?
2007 paper

** Timing-safe string comparison
- protect against timing attack based on how long verification takes
- constant time comparison
- there's no guarantee that it will take exactly same time
- can use HMAC

** Beyond Passwords
MFA

** U2F/FIDO

- challenge, signature and validate

* So you wanna Go Fast
https://github.com/strangeloop/StrangeLoop2017/blob/master/slides/TylerTreat-SoYouWannaGoFast.pdf
* Antics, drift, and chaos

** John Gall - system isn't doing what it says
- Netflix is a monitoring company with video streaming byproduct - Adrian Crockford

** Fault-Tolerance isn't composable
- Peter Alvaro

** Checks in Formal verification systems
- Most bugs in shim layer as opposed to the
** ETTO Principle
- Efficiency, Thoroughness tradeoff
** Decrementalism
- things get slowly worse over time within an organization
- how strict or thorough they are changes over time
** Normalization of Deviance
- Diane Vaughn

** Simple Systems -> Large Systems evolution

** Chaos Monkey
- Make wrong things harder
*** Chaos Engineering
- Take empirical approach and experiment
- Find vulnerabilities before they cause outage
- External Validity problem
  - You don't get the external validity unless you run on the sample
- CHAP
  - CHaos Automation Platform
- EVCache example
  - Clone URL
  - Route to two clusters
  - Look at behavior & difference between control and experiments
- http://principlesofchaos.org
  - Build hypothesis around steady state
  - Vary real-world events
  - Run experiments in production
  - Automate Experiments to Run Continuously
  - Minimize Blast Radius
** Summary
- Systems behave pathologically, but can use experiments to find the problems
- Chaos provide incentives

** Books
- The Systems Bible
- Drift Into Failure
- Chaos Engineering book

* Universal Reason

- OCaml/Reason that compiles to javascript

** Frontends are Fragile
** Compartmentalizing state
- reducer component has some state and has methods to update the state

** No impedance mismatch
** Adoption
Messenger.com -> total bugs introduced in the year: 10
** Lightweight higher order functions

**
** To Serve The People: Public Interest Technologists
- work should be aligned with who you are
- building social good app/website, etc?
- Public Interest Technology
  - Like Public Interest Lawyer
*** Places to get funding
- Open Tech Fund
- Open Knowledge Fund -- needs German resident
- Fight For the Future
- Netgain -- creating public interest technologies
- Institute for the Future -- 1 year commitment, assistance traveling to events, stipend
- New America - Cybersecurity Initiative -- write research paper, entry to "Future of War" conference
- Ford Foundation - tech fellow program -- move to NY and work in Ford Foundation
- Tech Congress - technologists with congressman
- Code for America - 9 months, working to make govt better
- Hewlett Foundation -- cyber security funds, competitive salary

*** Conferences
- Reconfiguring Reality - Oct 10-12 event, Reconfiguring Reality, Menlo Park, CA
- Aspiration: Non Profit Software Developer Summit. Nov 15 - 17, 2017, Oakland, CA
- CCC -- Dec 27 - 30, 2017 in Leipzip, Germany
- Internet Freedom Festival -- Valencia, Spain (March 5-9th, 2018)
- Re:publica -- May 2 - May 4, 2018, Berlin (Germany). SXSW but German.
- RightsCon -- Toronto(Canada) May 16-18, 2018. They have helpdesk for journalists and security people. AccessNow
- Oslo Freedom Forum -- May 28 - May 30, 2018. Like TED but talks are 8 minutes long.
- Allied Media Conference -- people who identify as female, primarily
* Geo-Replicated Transactions in 1.5RTT
- http://hack.systems
- http://github.com/rescrv
** Eventual Consistency
- [X] Writes are always local and thus fast

*** Consus Overview

Primary-less design : Applications contact the nearest data center
Serializable transactions
Efficient commit: Commit in 3 wide-area message delays
- 2 messages is the minimum
- 4 messages is 2-phase commit


- Uses 4-5 different Paxos flavors/optimizations in its implementation
**** Commit Protocol

- Using protocols like Paxos to build a system

**** Traditional Paxos

Paxos makes it possible to learn a value
- Nontriviality: value must have been proposed
- Stability: at most one value can be learned
- Consistency: two different learners cannot learn different values

- Can run n different instances of paxos
- Paxis ins't log replication, it's choosing single values in sequence

**** Generalized Paxos
- Mathematical treatment of Paxos
- Can implement Traditional Paxos on top of Generalized Paxos
- Stay on fast path and do one-hop aggrement
- If a proposal comes to one node, it needs to forward that to the leader which proposes

**** Issues with implementation
- Garbage Collection: Gen. Paxos instance lives only as long as a transaction
- Deadlock: other protocols cannot progress if there's a deadlock between datacenters

* Towards new deep learning abstractions on top of exist frameworks, underlying principles and distributed execution

- Intel Nervana

** Deep Learning
- Describes deep neural nets
** Crest Family of Deep Learning Chips from Intel
- Novel data format -- to be presented at NIPS

** Many to Many Problem

- Frameworks -> Hardware mapping problem
- Lock-in to ecosystem

** Nervana Graph Project
https://www.intelnervana.com/
https://github.com/NervanaSystems/neon

- IR for Deep Learning
- Compiler backends (transformers)
- Frontend "connectors"
- Reference frontend on neon
*** Computational Graph
- Dataflow Graph
- with support for control dependencies for side-effecting operations

*** ONNX - Open Neural Network Exchange
- They're participating in it
- at the moment only supports inference
- drawback: not connected to a compiler infrastructure

*** Graph Connectors
- Start with graph or layer representation

*** Supports
- MLP
- ConvNN
- RNN
- GANs

* Automating Cloud Security and Incident Response (DevSecOps)
- Jearvon Dharrie (Comcast)

- DenyEveryOneButWithMFA policy

- https://www.meetup.com/Software-as-Craft-Philadelphia/

** Infrastructure as Code
- Terraform

** Verification
** Accountability
- Catch things before going to production
- Code Reviews

** Audit Trails
- Git commit logs as audit trails
- Changes are just reverts

** Reusability
- Terraform remote

** Consistency
- Modules, with source that's another repo

** Automate

** Tests
- aws spec for it

** Insight

** Metrics
- Kibana dashboard

** AWS Config
- whether the buckets are compliant or not
- setup a rule and the rule checks certain resources
- can be pre-baked by AWS or a Lambda function

** Alerts
- setup rules on what to alert on
- unauthorized accesses, etc

** Remediation
- CloudTrail Logs: someone can turn that off
- Fix, Log, Alert
- Setup Cloudwatch rule, send to lambda and run the rule
- Audit -> just write to DynamoDB

** Tainted EC2 instance
- Fix, Log and remediate
- Depends on any business need
- Create sg with no ingress or egress

** Cloud Custodian

** Other tools
- Security Monkey, Aardvark, Repokid
- Run aws security benchmark
- Sentinel
- Chaos Testing
* Scaling with Apache Spark (or a lesson in unintended consequences)
- Holden Karau
- Author of Spark books - High Performance Spark
** Why do people come to Spark
- Hadoop MapReduce
- Data doesn't fit with existing methods -- Excel, etc
** Terms
- RDD, Dataframe, Dataset (dataframe with types)

** Design#1: Lazyness
*** DAG, Query Plan
- Uses DAG for resiliency
*** Debugging issues
- Figuring out stacktraces
*** Persist first for checkpointing

** Design#2: Partitioning
- Non-splittable data has issues with partitioning
- Partitioners in Spark are deterministic on key input
  - has to decide purely based on key data
  - key skew
  - impacts operations like groupByKey, sortByKey
- Never use groupByKey
- reduceByKey, aggregateByKey

- shuffle can cause problems too
  - sort can also fill up the single machine limit
  - can add suffix to key, but have to remove the shuffle if you need to join
- someone's working on a non-deterministic partitioner

** Design#3: Arbitrary Functions
- key-skew with black-boxes
- fix: Datasets
  - Spark is able to understand what you're doing
  - mix functional and relational style
** Where do datasets explode
- Iterative algorithms
- push downs have issues
- default shuffle size is sometimes too small for big data

** Apache Aero
- Interchange between different languages
